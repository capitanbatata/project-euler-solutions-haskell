module Lib
    ( solution1
    , solution2
    , solution2'
    ) where

solution1 :: Int
solution1 = sum . (takeWhile (<1000)) $  [x | x <- [0 ..] , x `mod` 3 == 0 || x `mod` 5 == 0]

-- | Each new term in the Fibonacci sequence is generated by adding the
-- previous two terms. By starting with 1 and 2, the first 10 terms will be:
--
-- > 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
--
-- By considering the terms in the Fibonacci sequence whose values do not
-- exceed four million, find the sum of the even-valued terms.
solution2 :: Int
solution2 = sum . takeWhile (< (4 * 10^6)) . (filter even)$  fibSeq

solution2' :: Int
solution2' = sum . takeWhile (< (4 * 10^6)) . (filter even)$ fibSeq'

-- | Exponential calculation of the fibonacci. Just to see what GHC will do with it.
fib 1 = 1
fib 2 = 2
fib n = fib (n - 2) + fib (n-1)

fibSeq :: [Int]
fibSeq = [fib i | i <- [1..]]

fibSeq' :: [Int]
fibSeq' = 0 : 1 : [ a + b | (a, b) <- zip fibSeq' (tail fibSeq')]
